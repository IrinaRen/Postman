{
	"info": {
		"_postman_id": "3835f053-674d-416f-afa5-d99342311413",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27645755"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let respData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"respData.name== reqData.name\", function () {\r",
							"pm.expect(respData.name).to.eql(\"Irina\")});\r",
							"\r",
							"// // 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"respData.age== reqData.age\", function () {\r",
							"pm.expect(respData.age).to.eql(\"28\")});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"respData.salary== reqData.salary\", function () {\r",
							"pm.expect(respData.salary).to.eql(1200)});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"const reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"resp.Name== \" + reqData.name, function () {\r",
							"pm.expect(respData.name).to.eql(reqData.name)});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"resp.age== \" + reqData.age, function () {\r",
							"pm.expect(respData.age).to.eql(reqData.age)});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"resp.salary== \" + reqData.salary, function () {\r",
							"pm.expect(respData.salary).to.eql(+reqData.salary)});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(respData.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year==(reqData.salary*4)== \"+ reqData.salary*4, function () {\r",
							"pm.expect(respData.family.u_salary_1_5_year).to.eql(+reqData.salary*4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Irina&age=28&salary=1200",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Irina"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let respData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"const reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"respData.name==reqData.name\", function() {\r",
							"    pm.expect(respData.name).to.eql(reqData.name)\r",
							"        }); \r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"respData.age==reqData.age\", function(){\r",
							"    pm.expect(respData.age).to.eql(reqData.age)\r",
							"        });\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"respData.salary==reqData.salary\", function(){\r",
							"    pm.expect(respData.salary).to.eql(+reqData.salary)\r",
							"        });\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(respData.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"'dog' parameter has a 'name' property\", function(){\r",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"name\")\r",
							"        });\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have age\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"age\")\r",
							"        });\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog`s name=='Luky\", function(){\r",
							"    pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"        });\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog`s age=4\", function(){\r",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4)\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Irina&age=28&salary=1200",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Irina"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let respData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"const reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"resp.Name=req.Name\", function(){\r",
							"    pm.expect(respData.name).to.eql(reqData.name)\r",
							"        });\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"resp.age=req.age\", function(){\r",
							"    pm.expect(respData.age).to.eql(+reqData.age)\r",
							"        });\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(respData.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(respData.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"resp.salary[0]==(req.salary)\" +reqData.salary, function(){\r",
							"    pm.expect(respData.salary[0]).to.eql(+reqData.salary)\r",
							"        });\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"resp.salary[1]==(req.salary*2)\" +reqData.salary*2, function(){\r",
							"    pm.expect(+respData.salary[1]).to.eql(reqData.salary*2)\r",
							"        });\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"resp.salary[1]==(req.salary*3)\" +reqData.salary*3, function(){\r",
							"    pm.expect(+respData.salary[2]).to.eql(reqData.salary*3)\r",
							"        });\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"let resp_name = respData.name;\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"let resp_age = respData.age;\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"let resp_salary = respData.salary;\r",
							"\r",
							"// // 18. Передать в окружение переменную name\r",
							"pm.environment.set('name', resp_name);\r",
							"\r",
							"// // 19. Передать в окружение переменную age\r",
							"pm.environment.set('age', resp_age);\r",
							"\r",
							"// // 20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary', resp_salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							" resp_salary.forEach(comment=>console.log(comment));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Irina&age=28&salary=1200",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Irina"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"\r",
							"// // 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let respBody = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"const reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"respBody has a 'start_qa_salary'\", function(){\r",
							"    pm.expect(respBody).to.have.property(\"start_qa_salary\")\r",
							"        });\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"respBody has a 'qa_salary_after_6_months'\", function(){\r",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_6_months\")\r",
							"        });\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"respBody has a 'qa_salary_after_12_months'\", function(){\r",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_12_months\")\r",
							"        });\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"respBody has a 'qa_salary_after_1.5_year'\", function(){\r",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"        });\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"respBody has a 'qa_salary_after_3.5_years'\", function(){\r",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"        });\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"respBody has a 'person'\", function(){\r",
							"    pm.expect(respBody).to.have.property(\"person\")\r",
							"        });\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"'start_qa_salary'==reqData.salary\", function(){\r",
							"    pm.expect(respBody.start_qa_salary).to.eql(+reqData.salary)\r",
							"        });\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"'qa_salary_after_6_months'==reqData.salary*2\", function(){\r",
							"    pm.expect(respBody.qa_salary_after_6_months).to.eql(+reqData.salary*2)\r",
							"        });\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"'qa_salary_after_12_months'==reqData.salary*2.7\", function(){\r",
							"    pm.expect(respBody.qa_salary_after_12_months).to.eql(+reqData.salary*2.7)\r",
							"        });\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"'qa_salary_after_1.5_year'==reqData.salary*3.3\", function(){\r",
							"    pm.expect(respBody[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary*3.3)\r",
							"        });\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"'qa_salary_after_3.5_years'==reqData.salary*3.8\", function(){\r",
							"    pm.expect(respBody[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary*3.8)\r",
							"        });\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"respBody.person.u_name[1]==reqData.salary\", function(){\r",
							"    pm.expect(respBody.person.u_name[1]).to.eql(+reqData.salary)\r",
							"        });\r",
							"\r",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"respBody.person.u_age==reqData.age\", function(){\r",
							"    pm.expect(respBody.person.u_age).to.eql(+reqData.age)\r",
							"        });\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"respBody.u_salary_5_years == reqData.salary*4.2\", function(){\r",
							"    pm.expect(respBody.person.u_salary_5_years).to.eql(+reqData.salary*4.2)\r",
							"        });\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"Object.entries(respBody.person).forEach(([key, value]) => console.log(key, value))\r",
							"for(key in respBody.person)\r",
							"  {console.log(key, respBody.person[key])};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// 2. Статус код 200",
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}
