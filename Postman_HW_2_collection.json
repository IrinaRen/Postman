{
	"info": {
		"_postman_id": "0a293a5d-a12b-4f5f-8f73-d9fe151b8183",
		"name": "HW_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first?name=Irina&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Irina"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3 user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(typeof(jsonData));\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request(name вбить руками)\r",
							"let user_name = jsonData.name;\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(user_name).to.eql('Irina')});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request(age вбить руками)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('26')});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000)});\r",
							"\r",
							"// 7. Спарсить request\r",
							"let reqData = request.data\r",
							"console.log(typeof(reqData));\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test name from request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name)});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test age from request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age)});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test salary from request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary)});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response \r",
							"console.log(jsonData.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check salary_1_5_year and salary*4\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary*4)});\r",
							"\r",
							"console.log(typeof(jsonData.age));\r",
							"console.log(typeof(reqData.age));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						},
						{
							"key": "age",
							"value": "26",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Irina",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"const requestData = pm.request.url.query.toObject();\r",
							"console.log(requestData);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name from request = name from response\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(requestData.name)});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test age from response = age from request\", function () {\r",
							"pm.expect(jsonData.age).to.eql(requestData.age)});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test salary from request\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(+requestData.salary)});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let req_family = jsonData.family;\r",
							"console.log(req_family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"let par_dog = jsonData.family.pets.dog;\r",
							"console.log(par_dog);\r",
							"pm.test(\"dog have name\", function () {\r",
							"pm.expect(par_dog).to.have.property(\"name\")});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have name\", function () {\r",
							"pm.expect(par_dog).to.have.property(\"age\")});\r",
							"\r",
							"//  11. Проверить, что параметр name имеет значение Luky.\r",
							"let dog_name = jsonData.family.pets.dog.name;\r",
							"console.log(typeof(dog_name));\r",
							"pm.test(\"name include Luky \", function () {\r",
							"pm.expect(dog_name).to.include(\"Luky\")});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"let dog_age = jsonData.family.pets.dog.age;\r",
							"// console.log(dog_age);\r",
							"pm.test(\"age include 4\", function () {\r",
							"pm.expect(dog_age).to.eql(4)});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Irina&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Irina"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200)});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"const requestData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name from response = name from equest\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(requestData.name)\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age from response = age from request\", function () {\r",
							"pm.expect(jsonData.age).to.eql(+requestData.age)\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary '0' from response = salary from request\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+ requestData.salary)\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary '1' from response = salary*2 from request\", function () { pm.expect(+ jsonData.salary[1]).to.eql(requestData.salary*2)});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary '2' from response = salary*3 from request\", function () {pm.expect( + jsonData.salary[2]).to.eql(requestData.salary*3)});\r",
							"\r",
							"// // 15. Создать в окружении переменную name\r",
							"let resp_name = jsonData.name;\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"let resp_age = jsonData.age;\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"let resp_salary = jsonData.salary;\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set('name', resp_name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set('age', resp_age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary', resp_salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"resp_salary.forEach(comment=>console.log(comment));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Irina&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Irina"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"pm.environment.set(\"salary\",\"1000\");\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"pm.environment.set(\"age\", \"27\");\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"pm.environment.set(\"name\",\"Irina\");\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200)});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(typeof(jsonData));\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"console.log(typeof(reqData));\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"jsonData is have start_qa_salary \", function () {\r",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\")});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"jsonData is have qa_salary_after_6_months \", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"jsonData is have qa_salary_after_12_months\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр      qa_salary_after_1.5_year\r",
							"pm.test(\"jsonData is have qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"jsonData is have qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"jsonData is have person\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"person\")});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = reqData.salary\", function () {\r",
							"pm.expect(jsonData.start_qa_salary).to.eql(+reqData.salary)});\r",
							"//console.log(typeof(reqData.salary));\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = reqData.salary*2\", function () {\r",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(+reqData.salary*2)\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = reqData.salary*2.7\", function () {\r",
							"pm.expect(jsonData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7)});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							" pm.test(\"qa_salary_after_1.5_year = reqData.salary*3.3\", function () { pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary*3.3)});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = reqData.salary*3.8\", function () { pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary*3.8)});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1]= salary from request\", function () { pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary)});\r",
							"\r",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\" u_age = age from request\", function () { pm.expect(jsonData.person.u_age).to.eql(+reqData.age)});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\" u_salary_5_years= salary*4.2 from request\", function () { pm.expect(jsonData.person.u_salary_5_years).to.eql(+ reqData.salary*4.2)});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"Object.entries(jsonData.person).forEach(([key, value]) => console.log(key, value));\r",
							"for (key in jsonData.person) {console.log(key, jsonData.person[key])};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Irina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "{{name}}",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "{{age}}",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "{{salary}}",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}